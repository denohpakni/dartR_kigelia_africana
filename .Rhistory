write.csv(amovaResults,file = "./Results/amovaResults.csv")
amovaResults <- gl.amova(snpkig)
write.csv(amovaResults,file = "./Results/amovaResults.csv")
write.csv(amovaResults,file = "./Results/amovaResults.csv")
rm(amovaResults)
gl.amova(snpkig)
# PCA Analysis
gl.pcoa(snpkig)
gl.plot.network(snpkig)
gl.plot.heatmap(snpkig)
gl.grm(snpkig)
utilis.recalc.avgpic(snpkig)
utilis.recalc.avgpic(snpkig,verbose = NULL)
out <- utilis.recalc.avgpic(snpkig,verbose = NULL)
out <- gl.avgpic(snpkig,verbose = NULL)
write.csv(basicStats,file = "./Results/basicStats.csv")
#Calculates basic statistics for each loci (Hs, Ho, Fis etc.)
basicStats <- gl.basic.stats(snpkig)
#This function calculates the mean probability of identity by state (IBS) across loci that would result from all the possible crosses of the individuals analyzed.
gl.tree.nj(snpkig)# Outputs an nj tree to summarize genetic similarity among populations
gl.random.snp(snpkig)
gl.dist.pop(snpkig) # An euclidean distance matrix
gl.dist.ind(scoreskig)
gl.dist.pop(snpkig) # An euclidean distance matrix
gl.genleastcost(snpkig)
gl.genleastcost(snpkig, NN=NULL)
gl.report.diversity(snpkig)
gl.list.reports()
gl.dist.ind(scoreskig)
gl.dist.ind(snpkig)
snpDM <- gl.dist.ind(snpkig)
write.csv(snpDM,file = "./Results/snpdm.csv")
rm(snpDM)
rm(dm)
snpdm <- gl.propShared(snpkig) #Calculates a similarity (distance) matrix
write.csv(snpdm,file = "./Results/snpdm.csv")
gl.propShared(snpkig)
gl.propShared(snpkig)
gl.dist.pop(snpkig) # An euclidean distance matrix
gl.dist.ind(scoreskig)
gl.genleastcost(snpkig, NN=NULL)
gl.genleastcost(snpkig, NN=NULL)
gl.genleastcost(snpkig, NN=NULL)
gl.report.diversity(snpkig)
gl.report.diversity(snpkig)
kigScores <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
rm(scoreskig)
gl.dist(snpkig)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
rm(kigScores)
gl.dist.pop(snpkig) # An euclidean distance matrix
gl.dist.pop(Scoreskig)
gl.dist.pop(snpkig) # An euclidean distance matrix
gl.tree.nj(snpkig)# Outputs an nj tree to summarize genetic similarity among populations
gl.tree.nj(glscores)
gl.tree.nj(Scoreskig)
############################# Diversity ###########################
gl.report.diversity(snpkig)
gl.tree.nj(Scoreskig)
utils.basic.stats(snpkig)
library(devtools)
library(dartR)
utils.basic.stats(snpkig)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
snpkig <- gl.read.dart(
filename="SNP_RAND.csv",
ind.metafile="SNP_population.csv")
######################## Distance Matrix ###########################
gl.dist.ind(snpkig)
utils.basic.stats(snpkig)
utils.basic.stats(snpkig, digits = 4)
basicStats <- gl.basic.stats(snpkig)
gl.test.heterozygosity(snpkig)
utils.basic.stats(snpkig, digits = 1)
utilis.het.pop(snpkig)
utils.het.pop(snpkig)
#Calculates the expected heterozygosities for each population in a genlight object
expectedHetz <- gl.test.heterozygosity(snpkig)
expectedPopHetz1 <- utils.het.pop(snpkig)
expectedPopHetz1
basicStats <- gl.basic.stats(snpkig)
library(devtools)
library(dartR)
basicStats <- gl.basic.stats(snpkig)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
snpkig <- gl.read.dart(
filename="SNP_RAND.csv",
ind.metafile="SNP_population.csv")
gl.save(snpkig,file = "tmp.Rdata")
basicStats <- gl.basic.stats(snpkig)
utils.basic.stats(snpkig, digits = 1)
basicStats
?basic.stats
print(basicStats)
expectedPopHetz1 <- utils.het.pop(snpkig)
print(basicStats)
Hs(basicStats)
######################## basic statistics ##################
# for each loci (Hs, Ho, Fis etc.)
# run ?basic.stats for details
basic.stats(snpkig)
expectedPopHetz1
#Calculates the expected heterozygosities for each population in a genlight object
expectedPopHetz <- gl.test.heterozygosity(snpkig)
gl.He(snpkig)
expectedHetz <- gl.He(snpkig)
print(expectedPopHetz)
write.csv(expectedHetz,file = "./Results/expectedHetz.csv")
observedHetz <- gl.Ho(snpkig)
print(observedHetz)
write.csv(observedHetz,file = "./Results/observedHetz.csv")
Hs(basicStats)
basicStats <- gl.basic.stats(snpkig)
print(basicStats)
write.csv(basicStats,file = "./Results/basicStats.csv")
######################## basic statistics ##################
# for each loci (Hs, Ho, Fis etc.)
# run ?basic.stats for details
basic.stats(snpkig)
################### Hardy-Weinberg tests over loci and populations ############
gl.hwe.pop(snpkig)
###################
gl.ibd(snpkig)
################### Mantel test ############
mantelTest <- gl.ibd(snpkig)
print(mantelTest)
write.csv(mantelTest,file = "./Results/mantelTest.csv")
dataFrame1 <- print(as.data.frame(mantelTest))
print(as.data.frame(mantelTest))
print(mantelTest)
?idb
??idb
gl.report.heterozygosity(snpkig) #Estimates expected Heterozygosity
gl.report.ld(snpkig)
(
gl.report.pa(snpkig)
gl.report.ld gl.report.ld gl.report.ld '''
gl.report.ld(snpkig)
gl.report.pa(snpkig)
install tidyverse
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
gl.report.pa(snpkig)
gl.grm(snpkig)
gl.tree.nj(snpkig)# Outputs an nj tree to summarize genetic similarity among populations
g.dist.pop(snpkig)
gl.dist.pop(snpkig)
gl.dist.ind(snpkig)
install.packages("adegenet")
install.packages("adegenet")
library(adegenet)
glPlot(snpkig)
glPCA(snpkig)
glPCA(snpkig)
glPca(snpkig)
glPca(snpkig)
dapc(snpkig)
dapc(snpkig)
glVar(snpkig)
############################# Diversity ###########################
gl.report.diversity(snpkig)
gl.report.heterozygosity(snpkig) #Estimates expected Heterozygosity
gl.grm(snpkig)
gl.report.maf(snpkig)
basicStats <- gl.basic.stats(Scoreskig)
rm(basicStats)
basicStatsSNP <- gl.basic.stats(snpkig)
print(basicStatsSNP)
basicStatsScores <- gl.basic.stats(Scoreskig)
print(basicStatsScores)
library(adegenet)
library(devtools)
library(dartR)
######################## basic statistics ##################
# for each loci (Hs, Ho, Fis etc.)
# run ?basic.stats for details
basic.stats(snpkig)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
snpkig <- gl.read.dart(
filename="SNP_RAND.csv",
ind.metafile="SNP_population.csv")
utils.recalc.avgpic(snpkig)
# Generate a geographical map
gl.map.interactive(snpkig)
utils.recalc.avgpic(snpkig)
gl.avgpic(snpkig)
utils.recalc.avgpic(snpkig, verbose= NULL)
utils.recalc.maf(snpkig)
gl.report.maf(snpkig)
gl.report.parent.offspring(snpkig)
gl.report.diversity(snpkig)
gl.report.ld.map(snpkig)
gl.report.hwe(snpkig)
gl.report.maf(snpkig)
gl.report.maf(Scoreskig)
gl.report.maf(Scoreskig)
gl.report.maf(Scoreskig)
library(devtools)
library(dartR)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
snpkig <- gl.read.dart(
filename="SNP_RAND.csv",
ind.metafile="SNP_population.csv")
gl.save(snpkig,file = "tmp.Rdata")
################### Hardy-Weinberg tests over loci and populations ############
gl.hwe.pop(snpkig)
############################# Diversity ###########################
gl.report.diversity(snpkig)
gl.report.heterozygosity(snpkig) #Estimates expected Heterozygosity
library(devtools)
library(dartR)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
snpkig <- gl.read.dart(
filename="SNP_RAND.csv",
ind.metafile="SNP_population.csv")
gl.diagnostics.hwe(snpkig)
gl.random.snp(snpkig)
gl.run.structure(snpkig,exec = "./structure.exe")
str_snp <- gl.read.dart(
filename="str_snp.csv",
ind.metafile="str_pop.csv")
gl.run.structure(str_snp,path)
gl.run.structure(str_snp,exec = "./structure.exe")
sr <- gl.run.structure(str_snp, k.range = 2:5, num.k.rep = 3, exec = './structure')
sr <- gl.run.structure(str_snp, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
ev <- gl.evanno(sr)
ev
qmat <- gl.plot.structure(sr, K=3)
head(qmat)
gl.map.structure(qmat, K=3, bc, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=3, str_snp, scalex=1, scaley=0.5)
head(qmat)
ev
qmat <- gl.plot.structure(sr, K=3)
qmat <- gl.plot.structure(sr, K=3)
qmat <- gl.plot.structure(sr, K=2)
qmat <- gl.plot.structure(sr, K=1)
qmat <- gl.plot.structure(sr, K=4)
qmat <- gl.plot.structure(sr, K=7)
qmat <- gl.plot.structure(sr, K=5)
qmat <- gl.plot.structure(sr, K=3)
gl.dist.pop(snpkig)
gl.report.hwe(snpkig)
################### Hardy-Weinberg tests over loci and populations ############
gl.hwe.pop(snpkig)
############################# Diversity ###########################
gl.report.diversity(snpkig)
gl.report.ld.map(snpkig)
########################## Reports ###################################
gl.report.maf(snpkig)
gl.report.diversity(snpkig)
gl.report.heterozygosity(snpkig) #Estimates expected Heterozygosity
gl.report.diversity(snpkig)
gl.report.diversity(snpkig) #diversity indexes for SNPs
gl.report.heterozygosity(snpkig) #Estimates Heterozygosity
gl.report.diversity(snpkig) #diversity indexes for SNPs
gl.report.heterozygosity(snpkig) #Estimates Heterozygosity
gl.report.diversity(snpkig) #diversity indexes for SNPs
gl.grm(snpkig)
gl.tree.nj(snpkig)# Outputs an nj tree to summarize genetic similarity among populations
gl.tree.nj(Scoreskig)
## Run for SNP and Silicos
srScores <- gl.run.structure(Scoreskig, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
###### Population STRUCTURE ##########################
gl.tree.nj(Scoreskig)
ev
## Run for SNP
sr <- gl.run.structure(Scoreskig, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
save()
saveRDS(ev)
save(ev)
save('ev')
sr
qmat <- gl.plot.structure(sr, K=3)
qmat
library(devtools)
library(dartR)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
snpkig <- gl.read.dart(
filename="SNP_RAND.csv",
ind.metafile="SNP_population.csv")
gl.diagnostics.hwe(snpkig)
#
gl.tree.nj(snpkig)# nj tree to summarize genetic similarity among populations
## Run for SNP
sr <- gl.run.structure(snpkig, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
ev <- gl.evanno(sr)
ev
qmat <- gl.plot.structure(sr, K=3)
qmat
head(qmat)
gl.map.structure(qmat, K=3, snpkig, scalex=1, scaley=0.5)
qmat
ev
qmat <- gl.plot.structure(sr, K=3)
gl.tree.nj(snpkig)# nj tree to summarize genetic similarity among populations
gl.tree.nj(snpkig)# nj tree to summarize genetic similarity among populations
gl.report.diversity(snpkig) #diversity indexes for SNPs
# PCA Analysis
gl.pcoa(snpkig)
# PCA Analysis
gl.pca(snpkig)
# PCA Analysis
gl.pcoa(snpkig)
gl.assign.pca(snpkig)
gl.assign.pca(snpkig, unknown, plevel = 0.999, plot.out = TRUE, verbose = NULL)
gl.pcoa.plot(glPca, snpkig)
# PCA Analysis
glPca < - gl.pcoa(snpkig)
gl.pcoa.plot(glPca, snpkig)
# PCA Analysis
gl.pcoa(
snpkig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
plot_theme = theme_dartR(),
plot_colors = two_colors,
save2tmp = FALSE,
verbose = NULL
)
# PCA Analysis
gl.pcoa(
snpkig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
plot_theme = theme_dartR(),
save2tmp = FALSE,
verbose = NULL
)
# PCA Analysis
gl.pcoa(
snpkig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
# PCA Analysis
pca <- gl.pcoa(
snpkig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
gl.pcoa.plot(pca, sr)
gl.pcoa.plot(pca, snpkig)
# PCA Analysis
pcaScores <- gl.pcoa(
Scoreskig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
gl.pcoa.plot(pcaScores, snpkig)
rmpca
rm(pca)
# PCA Analysis
pcaSNP <- gl.pcoa(
snpkig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
# PCA Analysis
pcaScores <- gl.pcoa(
Scoreskig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
gl.pcoa.plot(pcaScores, Scoreskig)
View(pcaSNP)
gl.pcoa.plot(pcaScores, Scoreskig)
# PCA Analysis
pcaScores <- gl.pcoa(
Scoreskig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
install.packages("tidyverse")
pwd()
setwd()
getwd()
setwd()
pwd()
list.files()
view()
view()
view()
view("SNP.csv")
library(devtools)
library(dartR)
Scoreskig <- gl.read.silicodart(
filename="SilicoDArT_RAND.csv",
ind.metafile="SNP_population.csv")
snpkig <- gl.read.dart(
filename="SNP_RAND.csv",
ind.metafile="SNP_population.csv")
basicStats <- gl.basic.stats(snpkig)
str(snpkig)
dim(basicStats)
gl.report.heterozygosity(snpkig)
utils.basic.stats(snpkig, digits = 3)
out <- utils.basic.stats(snpkig, digits = 3)
x <- snpkig
out <- utils.basic.stats(snpkig, digits = 3)
out <- utils.basic.stats(snpkig.gl, digits = 3)
utils.het.pop(snpkig)
out <-utils.het.pop(snpkig)
view(out)
gl.amova(snpkig)
out < - gl.amova(snpkig, permutations = 1)
out < - gl.amova(snpkig, permutations=1)
out < - gl.amova(snpkig)
out <- gl.amova(snpkig)
View(out)
View(out)
out[["varcoef"]]
View(out[["varcomp"]])
View(out[["tab"]])
View(out[["varcomp"]])
out[["call"]]
View(out[["varcomp"]])
View(out[["varcomp"]])
out[["varcoef"]]
out
View(out[["varcomp"]])
out[["varcoef"]]
out
View(out[["tab"]])
AMOVA_snp <- gl.amova(snpkig)
AMOVA_Scores <- gl.amova(Scoreskig)
View(Scoreskig)
Scoreskig
View(AMOVA_Scores)
AMOVA_Scores
View(AMOVA_snp)
View(AMOVA_snp)
AMOVA_snp
gl.pcoa.plot(pcaScores, Scoreskig)
# PCA Analysis
pcaScores <- gl.pcoa(
Scoreskig,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
gl.pcoa.plot(pcaScores, Scoreskig)
################### Mantel test ############
mantelTest <- gl.ibd(snpkig)
View(mantelTest)
mantelTest
